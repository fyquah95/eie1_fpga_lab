// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/27/2015 17:40:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	clock,
	sampler_tx
);
input  clock;
output sampler_tx;

reg sample;
time current_time;
always @(clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	display,
	o,
	tick,
	sampler_rx
);
input [27:0] display;
input [15:0] o;
input  tick;
input sampler_rx;

reg [27:0] display_expected;
reg [15:0] o_expected;
reg  tick_expected;

reg [27:0] display_prev;
reg [15:0] o_prev;
reg  tick_prev;

reg [27:0] display_expected_prev;
reg [15:0] o_expected_prev;
reg  tick_expected_prev;

reg [27:0] last_display_exp;
reg [15:0] last_o_exp;
reg  last_tick_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	display_prev = display;
	o_prev = o;
	tick_prev = tick;
end

// update expected /o prevs

always @(trigger)
begin
	display_expected_prev = display_expected;
	o_expected_prev = o_expected;
	tick_expected_prev = tick_expected;
end


// expected display[ 27 ]
initial
begin
	display_expected[27] = 1'bX;
	display_expected[27] = #999000 1'b0;
end 
// expected display[ 26 ]
initial
begin
	display_expected[26] = 1'bX;
	display_expected[26] = #999000 1'b0;
end 
// expected display[ 25 ]
initial
begin
	display_expected[25] = 1'bX;
	display_expected[25] = #999000 1'b0;
end 
// expected display[ 24 ]
initial
begin
	display_expected[24] = 1'bX;
	display_expected[24] = #999000 1'b0;
end 
// expected display[ 23 ]
initial
begin
	display_expected[23] = 1'bX;
	display_expected[23] = #999000 1'b0;
end 
// expected display[ 22 ]
initial
begin
	display_expected[22] = 1'bX;
	display_expected[22] = #999000 1'b0;
end 
// expected display[ 21 ]
initial
begin
	display_expected[21] = 1'bX;
	display_expected[21] = #999000 1'b0;
end 
// expected display[ 20 ]
initial
begin
	display_expected[20] = 1'bX;
	display_expected[20] = #999000 1'b0;
end 
// expected display[ 19 ]
initial
begin
	display_expected[19] = 1'bX;
	display_expected[19] = #999000 1'b0;
end 
// expected display[ 18 ]
initial
begin
	display_expected[18] = 1'bX;
	display_expected[18] = #999000 1'b0;
end 
// expected display[ 17 ]
initial
begin
	display_expected[17] = 1'bX;
	display_expected[17] = #999000 1'b0;
end 
// expected display[ 16 ]
initial
begin
	display_expected[16] = 1'bX;
	display_expected[16] = #999000 1'b0;
end 
// expected display[ 15 ]
initial
begin
	display_expected[15] = 1'bX;
	display_expected[15] = #999000 1'b0;
end 
// expected display[ 14 ]
initial
begin
	display_expected[14] = 1'bX;
	display_expected[14] = #999000 1'b0;
end 
// expected display[ 13 ]
initial
begin
	display_expected[13] = 1'bX;
	display_expected[13] = #999000 1'b0;
end 
// expected display[ 12 ]
initial
begin
	display_expected[12] = 1'bX;
	display_expected[12] = #999000 1'b0;
end 
// expected display[ 11 ]
initial
begin
	display_expected[11] = 1'bX;
	display_expected[11] = #999000 1'b0;
end 
// expected display[ 10 ]
initial
begin
	display_expected[10] = 1'bX;
	display_expected[10] = #999000 1'b0;
end 
// expected display[ 9 ]
initial
begin
	display_expected[9] = 1'bX;
	display_expected[9] = #999000 1'b0;
end 
// expected display[ 8 ]
initial
begin
	display_expected[8] = 1'bX;
	display_expected[8] = #999000 1'b0;
end 
// expected display[ 7 ]
initial
begin
	display_expected[7] = 1'bX;
	display_expected[7] = #999000 1'b0;
end 
// expected display[ 6 ]
initial
begin
	display_expected[6] = 1'bX;
	display_expected[6] = #999000 1'b0;
end 
// expected display[ 5 ]
initial
begin
	display_expected[5] = 1'bX;
	display_expected[5] = #999000 1'b0;
end 
// expected display[ 4 ]
initial
begin
	display_expected[4] = 1'bX;
	display_expected[4] = #999000 1'b0;
end 
// expected display[ 3 ]
initial
begin
	display_expected[3] = 1'bX;
	display_expected[3] = #999000 1'b0;
end 
// expected display[ 2 ]
initial
begin
	display_expected[2] = 1'bX;
	display_expected[2] = #999000 1'b0;
end 
// expected display[ 1 ]
initial
begin
	display_expected[1] = 1'bX;
	display_expected[1] = #999000 1'b0;
end 
// expected display[ 0 ]
initial
begin
	display_expected[0] = 1'bX;
	display_expected[0] = #999000 1'b0;
end 

// expected tick
initial
begin
	tick_expected = 1'bX;
	tick_expected = #999000 1'b0;
end 
// expected o[ 15 ]
initial
begin
	o_expected[15] = 1'bX;
	o_expected[15] = #999000 1'b0;
end 
// expected o[ 14 ]
initial
begin
	o_expected[14] = 1'bX;
	o_expected[14] = #999000 1'b0;
end 
// expected o[ 13 ]
initial
begin
	o_expected[13] = 1'bX;
	o_expected[13] = #999000 1'b0;
end 
// expected o[ 12 ]
initial
begin
	o_expected[12] = 1'bX;
	o_expected[12] = #999000 1'b0;
end 
// expected o[ 11 ]
initial
begin
	o_expected[11] = 1'bX;
	o_expected[11] = #999000 1'b0;
end 
// expected o[ 10 ]
initial
begin
	o_expected[10] = 1'bX;
	o_expected[10] = #999000 1'b0;
end 
// expected o[ 9 ]
initial
begin
	o_expected[9] = 1'bX;
	o_expected[9] = #999000 1'b0;
end 
// expected o[ 8 ]
initial
begin
	o_expected[8] = 1'bX;
	o_expected[8] = #999000 1'b0;
end 
// expected o[ 7 ]
initial
begin
	o_expected[7] = 1'bX;
	o_expected[7] = #999000 1'b0;
end 
// expected o[ 6 ]
initial
begin
	o_expected[6] = 1'bX;
	o_expected[6] = #999000 1'b0;
end 
// expected o[ 5 ]
initial
begin
	o_expected[5] = 1'bX;
	o_expected[5] = #999000 1'b0;
end 
// expected o[ 4 ]
initial
begin
	o_expected[4] = 1'bX;
	o_expected[4] = #999000 1'b0;
end 
// expected o[ 3 ]
initial
begin
	o_expected[3] = 1'bX;
	o_expected[3] = #999000 1'b0;
end 
// expected o[ 2 ]
initial
begin
	o_expected[2] = 1'bX;
	o_expected[2] = #999000 1'b0;
end 
// expected o[ 1 ]
initial
begin
	o_expected[1] = 1'bX;
	o_expected[1] = #999000 1'b0;
end 
// expected o[ 0 ]
initial
begin
	o_expected[0] = 1'bX;
	o_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(display_expected or display or o_expected or o or tick_expected or tick)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display = %b | expected o = %b | expected tick = %b | ",display_expected_prev,o_expected_prev,tick_expected_prev);
	$display("| real display = %b | real o = %b | real tick = %b | ",display_prev,o_prev,tick_prev);
`endif
	if (
		( display_expected_prev[0] !== 1'bx ) && ( display_prev[0] !== display_expected_prev[0] )
		&& ((display_expected_prev[0] !== last_display_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[0] = display_expected_prev[0];
	end
	if (
		( display_expected_prev[1] !== 1'bx ) && ( display_prev[1] !== display_expected_prev[1] )
		&& ((display_expected_prev[1] !== last_display_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[1] = display_expected_prev[1];
	end
	if (
		( display_expected_prev[2] !== 1'bx ) && ( display_prev[2] !== display_expected_prev[2] )
		&& ((display_expected_prev[2] !== last_display_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[2] = display_expected_prev[2];
	end
	if (
		( display_expected_prev[3] !== 1'bx ) && ( display_prev[3] !== display_expected_prev[3] )
		&& ((display_expected_prev[3] !== last_display_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[3] = display_expected_prev[3];
	end
	if (
		( display_expected_prev[4] !== 1'bx ) && ( display_prev[4] !== display_expected_prev[4] )
		&& ((display_expected_prev[4] !== last_display_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[4] = display_expected_prev[4];
	end
	if (
		( display_expected_prev[5] !== 1'bx ) && ( display_prev[5] !== display_expected_prev[5] )
		&& ((display_expected_prev[5] !== last_display_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[5] = display_expected_prev[5];
	end
	if (
		( display_expected_prev[6] !== 1'bx ) && ( display_prev[6] !== display_expected_prev[6] )
		&& ((display_expected_prev[6] !== last_display_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[6] = display_expected_prev[6];
	end
	if (
		( display_expected_prev[7] !== 1'bx ) && ( display_prev[7] !== display_expected_prev[7] )
		&& ((display_expected_prev[7] !== last_display_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[7] = display_expected_prev[7];
	end
	if (
		( display_expected_prev[8] !== 1'bx ) && ( display_prev[8] !== display_expected_prev[8] )
		&& ((display_expected_prev[8] !== last_display_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[8] = display_expected_prev[8];
	end
	if (
		( display_expected_prev[9] !== 1'bx ) && ( display_prev[9] !== display_expected_prev[9] )
		&& ((display_expected_prev[9] !== last_display_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[9] = display_expected_prev[9];
	end
	if (
		( display_expected_prev[10] !== 1'bx ) && ( display_prev[10] !== display_expected_prev[10] )
		&& ((display_expected_prev[10] !== last_display_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[10] = display_expected_prev[10];
	end
	if (
		( display_expected_prev[11] !== 1'bx ) && ( display_prev[11] !== display_expected_prev[11] )
		&& ((display_expected_prev[11] !== last_display_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[11] = display_expected_prev[11];
	end
	if (
		( display_expected_prev[12] !== 1'bx ) && ( display_prev[12] !== display_expected_prev[12] )
		&& ((display_expected_prev[12] !== last_display_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[12] = display_expected_prev[12];
	end
	if (
		( display_expected_prev[13] !== 1'bx ) && ( display_prev[13] !== display_expected_prev[13] )
		&& ((display_expected_prev[13] !== last_display_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[13] = display_expected_prev[13];
	end
	if (
		( display_expected_prev[14] !== 1'bx ) && ( display_prev[14] !== display_expected_prev[14] )
		&& ((display_expected_prev[14] !== last_display_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[14] = display_expected_prev[14];
	end
	if (
		( display_expected_prev[15] !== 1'bx ) && ( display_prev[15] !== display_expected_prev[15] )
		&& ((display_expected_prev[15] !== last_display_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[15] = display_expected_prev[15];
	end
	if (
		( display_expected_prev[16] !== 1'bx ) && ( display_prev[16] !== display_expected_prev[16] )
		&& ((display_expected_prev[16] !== last_display_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[16] = display_expected_prev[16];
	end
	if (
		( display_expected_prev[17] !== 1'bx ) && ( display_prev[17] !== display_expected_prev[17] )
		&& ((display_expected_prev[17] !== last_display_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[17] = display_expected_prev[17];
	end
	if (
		( display_expected_prev[18] !== 1'bx ) && ( display_prev[18] !== display_expected_prev[18] )
		&& ((display_expected_prev[18] !== last_display_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[18] = display_expected_prev[18];
	end
	if (
		( display_expected_prev[19] !== 1'bx ) && ( display_prev[19] !== display_expected_prev[19] )
		&& ((display_expected_prev[19] !== last_display_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[19] = display_expected_prev[19];
	end
	if (
		( display_expected_prev[20] !== 1'bx ) && ( display_prev[20] !== display_expected_prev[20] )
		&& ((display_expected_prev[20] !== last_display_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[20] = display_expected_prev[20];
	end
	if (
		( display_expected_prev[21] !== 1'bx ) && ( display_prev[21] !== display_expected_prev[21] )
		&& ((display_expected_prev[21] !== last_display_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[21] = display_expected_prev[21];
	end
	if (
		( display_expected_prev[22] !== 1'bx ) && ( display_prev[22] !== display_expected_prev[22] )
		&& ((display_expected_prev[22] !== last_display_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[22] = display_expected_prev[22];
	end
	if (
		( display_expected_prev[23] !== 1'bx ) && ( display_prev[23] !== display_expected_prev[23] )
		&& ((display_expected_prev[23] !== last_display_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[23] = display_expected_prev[23];
	end
	if (
		( display_expected_prev[24] !== 1'bx ) && ( display_prev[24] !== display_expected_prev[24] )
		&& ((display_expected_prev[24] !== last_display_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[24] = display_expected_prev[24];
	end
	if (
		( display_expected_prev[25] !== 1'bx ) && ( display_prev[25] !== display_expected_prev[25] )
		&& ((display_expected_prev[25] !== last_display_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[25] = display_expected_prev[25];
	end
	if (
		( display_expected_prev[26] !== 1'bx ) && ( display_prev[26] !== display_expected_prev[26] )
		&& ((display_expected_prev[26] !== last_display_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[26] = display_expected_prev[26];
	end
	if (
		( display_expected_prev[27] !== 1'bx ) && ( display_prev[27] !== display_expected_prev[27] )
		&& ((display_expected_prev[27] !== last_display_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_exp[27] = display_expected_prev[27];
	end
	if (
		( o_expected_prev[0] !== 1'bx ) && ( o_prev[0] !== o_expected_prev[0] )
		&& ((o_expected_prev[0] !== last_o_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[0] = o_expected_prev[0];
	end
	if (
		( o_expected_prev[1] !== 1'bx ) && ( o_prev[1] !== o_expected_prev[1] )
		&& ((o_expected_prev[1] !== last_o_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[1] = o_expected_prev[1];
	end
	if (
		( o_expected_prev[2] !== 1'bx ) && ( o_prev[2] !== o_expected_prev[2] )
		&& ((o_expected_prev[2] !== last_o_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[2] = o_expected_prev[2];
	end
	if (
		( o_expected_prev[3] !== 1'bx ) && ( o_prev[3] !== o_expected_prev[3] )
		&& ((o_expected_prev[3] !== last_o_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[3] = o_expected_prev[3];
	end
	if (
		( o_expected_prev[4] !== 1'bx ) && ( o_prev[4] !== o_expected_prev[4] )
		&& ((o_expected_prev[4] !== last_o_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[4] = o_expected_prev[4];
	end
	if (
		( o_expected_prev[5] !== 1'bx ) && ( o_prev[5] !== o_expected_prev[5] )
		&& ((o_expected_prev[5] !== last_o_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[5] = o_expected_prev[5];
	end
	if (
		( o_expected_prev[6] !== 1'bx ) && ( o_prev[6] !== o_expected_prev[6] )
		&& ((o_expected_prev[6] !== last_o_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[6] = o_expected_prev[6];
	end
	if (
		( o_expected_prev[7] !== 1'bx ) && ( o_prev[7] !== o_expected_prev[7] )
		&& ((o_expected_prev[7] !== last_o_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[7] = o_expected_prev[7];
	end
	if (
		( o_expected_prev[8] !== 1'bx ) && ( o_prev[8] !== o_expected_prev[8] )
		&& ((o_expected_prev[8] !== last_o_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[8] = o_expected_prev[8];
	end
	if (
		( o_expected_prev[9] !== 1'bx ) && ( o_prev[9] !== o_expected_prev[9] )
		&& ((o_expected_prev[9] !== last_o_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[9] = o_expected_prev[9];
	end
	if (
		( o_expected_prev[10] !== 1'bx ) && ( o_prev[10] !== o_expected_prev[10] )
		&& ((o_expected_prev[10] !== last_o_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[10] = o_expected_prev[10];
	end
	if (
		( o_expected_prev[11] !== 1'bx ) && ( o_prev[11] !== o_expected_prev[11] )
		&& ((o_expected_prev[11] !== last_o_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[11] = o_expected_prev[11];
	end
	if (
		( o_expected_prev[12] !== 1'bx ) && ( o_prev[12] !== o_expected_prev[12] )
		&& ((o_expected_prev[12] !== last_o_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[12] = o_expected_prev[12];
	end
	if (
		( o_expected_prev[13] !== 1'bx ) && ( o_prev[13] !== o_expected_prev[13] )
		&& ((o_expected_prev[13] !== last_o_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[13] = o_expected_prev[13];
	end
	if (
		( o_expected_prev[14] !== 1'bx ) && ( o_prev[14] !== o_expected_prev[14] )
		&& ((o_expected_prev[14] !== last_o_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[14] = o_expected_prev[14];
	end
	if (
		( o_expected_prev[15] !== 1'bx ) && ( o_prev[15] !== o_expected_prev[15] )
		&& ((o_expected_prev[15] !== last_o_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_expected_prev);
		$display ("     Real value = %b", o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_exp[15] = o_expected_prev[15];
	end
	if (
		( tick_expected_prev !== 1'bx ) && ( tick_prev !== tick_expected_prev )
		&& ((tick_expected_prev !== last_tick_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tick :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tick_expected_prev);
		$display ("     Real value = %b", tick_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_tick_exp = tick_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire [27:0] display;
wire [15:0] o;
wire tick;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.display(display),
	.o(o),
	.tick(tick)
);

// clock
always
begin
	clock = 1'b0;
	clock = #100 1'b1;
	#100;
end 

main_vlg_sample_tst tb_sample (
	.clock(clock),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.display(display),
	.o(o),
	.tick(tick),
	.sampler_rx(sampler)
);
endmodule

